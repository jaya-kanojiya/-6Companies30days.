There are N stairs, and a person standing at the bottom wants to reach the top. The person can 
climb either 1 stair or 2 stairs at a time. Count the number of ways, the person can reach the top (order does not matter).
Note: Order does not matter means for n=4 {1 2 1},{2 1 1},{1 1 2} are considered same.

class Solution
{
    //Function to count number of ways to reach the nth stair 
    //when order does not matter.
    Long countWays(int n)
    {
        // your code here
        long mod=(int)Math.pow(10,9)+7;
        long[] arr=new long[2];int w=n;
        arr[0]=1;arr[1]=2;n=2;
        long[][] dp=new long[n+1][w+1];
        for(int i=0;i<=n;i++) dp[i][0]=1;
        for(int i=1;i<=n;i++) {
            for(int j=1;j<=w;j++) {
                if(arr[i-1]<=j)
                    dp[i][j]=(dp[i][j-(int)arr[i-1]]+dp[i-1][j])%mod;
                else
                    dp[i][j]=(dp[i-1][j])%mod;
            }
        }
        return (Long)(long)(dp[n][w]%mod);
    }    
}
