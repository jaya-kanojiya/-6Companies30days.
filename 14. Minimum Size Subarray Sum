/*
Given an array of positive integers nums and a positive integer target, return the minimal
length of a contiguous subarray [numsl, numsl+1, ..., numsr-1, numsr] of which the sum is
greater than or equal to target. If there is no such subarray, return 0 instead
*/
//using sliding window
class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        int n=nums.size();
        int start=0,end=0, sum=0;
        int minLength=INT_MAX;
        for(;end<n;end++)
        {
            sum+=nums[end];
            while(sum >= target)
            {
                minLength=min(minLength,end-start+1);
                sum-=nums[start];
                start++;
            }
        }
        if(minLength==INT_MAX)
            return 0;
        return minLength;
        
    }
};
-----------------------------
//similar approach
class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
    
        int n=nums.size();
       int start=0,end=0, sum=0;
          int minLength=INT_MAX;
while(end<n)
{
while(sum<target && end<n)
sum+=nums[end++];
while(sum >= target && start<n)
{
minLength=min(minLength,end-start);
sum-=nums[start++];
}
}
if(minLength==INT_MAX)
return 0;
return minLength;
        
    }
};
